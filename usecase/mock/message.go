// Code generated by MockGen. DO NOT EDIT.
// Source: message.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entity "github.com/tusmasoma/go-chat-app/entity"
)

// MockMessageUseCase is a mock of MessageUseCase interface.
type MockMessageUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockMessageUseCaseMockRecorder
}

// MockMessageUseCaseMockRecorder is the mock recorder for MockMessageUseCase.
type MockMessageUseCaseMockRecorder struct {
	mock *MockMessageUseCase
}

// NewMockMessageUseCase creates a new mock instance.
func NewMockMessageUseCase(ctrl *gomock.Controller) *MockMessageUseCase {
	mock := &MockMessageUseCase{ctrl: ctrl}
	mock.recorder = &MockMessageUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageUseCase) EXPECT() *MockMessageUseCaseMockRecorder {
	return m.recorder
}

// CreateMessage mocks base method.
func (m *MockMessageUseCase) CreateMessage(ctx context.Context, message *entity.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockMessageUseCaseMockRecorder) CreateMessage(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockMessageUseCase)(nil).CreateMessage), ctx, message)
}

// DeleteMessage mocks base method.
func (m *MockMessageUseCase) DeleteMessage(ctx context.Context, message *entity.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockMessageUseCaseMockRecorder) DeleteMessage(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockMessageUseCase)(nil).DeleteMessage), ctx, message)
}

// UpdateMessage mocks base method.
func (m *MockMessageUseCase) UpdateMessage(ctx context.Context, message *entity.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessage", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMessage indicates an expected call of UpdateMessage.
func (mr *MockMessageUseCaseMockRecorder) UpdateMessage(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessage", reflect.TypeOf((*MockMessageUseCase)(nil).UpdateMessage), ctx, message)
}
